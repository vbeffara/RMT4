import Mathlib.Analysis.Complex.LocallyUniformLimit
import Mathlib.Analysis.Complex.OpenMapping
import RMT4.defs

open Topology Filter Set Function UniformConvergence Metric

variable {U : Set ‚ÑÇ} {Q : Set ‚ÑÇ ‚Üí Set ‚ÑÇ} {Œπ : Type*} {l : Filter Œπ}

-- `ùìí U` is an alias for `‚ÑÇ ‚Üí ‚ÑÇ` equipped with compact convergence on `U`

abbrev ùìí (U : Set ‚ÑÇ) := ‚ÑÇ ‚Üí·µ§[compacts U] ‚ÑÇ

noncomputable def uderiv (f : ùìí U) : ùìí U := deriv f

lemma tendsto_ùìí_iff (hU : IsOpen U) {F : Œπ ‚Üí ùìí U} {f : ùìí U} :
    Tendsto F l (ùìù f) ‚Üî TendstoLocallyUniformlyOn F f l U := by
  simp [UniformOnFun.tendsto_iff_tendstoUniformlyOn, _root_.compacts]
  exact (tendstoLocallyUniformlyOn_iff_forall_isCompact hU).symm

-- `ùìó U` is the space of holomorphic functions on `U`

def ùìó (U : Set ‚ÑÇ) := {f : ùìí U | DifferentiableOn ‚ÑÇ f U}

lemma isClosed_ùìó (hU : IsOpen U) : IsClosed (ùìó U) := by
  refine isClosed_iff_clusterPt.2 (Œª f hf => ?_)
  refine @TendstoLocallyUniformlyOn.differentiableOn _ _ _ _ _ _ _ id f hf ?_ ?_ hU
  ¬∑ simp [‚Üê tendsto_ùìí_iff hU, Tendsto]
  ¬∑ simp [eventually_inf_principal, ùìó]; exact eventually_of_forall (Œª g => id)

lemma ContinuousOn_uderiv (hU : IsOpen U) : ContinuousOn uderiv (ùìó U) := by
  rintro f -
  refine (tendsto_ùìí_iff hU).2 ?_
  refine TendstoLocallyUniformlyOn.deriv ?_ eventually_mem_nhdsWithin hU
  apply (tendsto_ùìí_iff hU).1
  exact nhdsWithin_le_nhds

-- `ùìë U Q` is the collection of `Q`-bounded holomorphic maps on `U`

def ùìë (U : Set ‚ÑÇ) (Q : Set ‚ÑÇ ‚Üí Set ‚ÑÇ) : Set (ùìí U) :=
    {f ‚àà ùìó U | ‚àÄ K ‚àà compacts U, MapsTo f K (Q K)}

lemma ùìë_const {Q : Set ‚ÑÇ} : ùìë U (fun _ => Q) = {f ‚àà ùìó U | MapsTo f U Q} := by
  simp [ùìë, ‚Üê mapsTo_sUnion]

theorem isClosed_ùìë (hU : IsOpen U) (hQ : ‚àÄ K ‚àà compacts U, IsCompact (Q K)) :
    IsClosed (ùìë U Q) := by
  rw [ùìë, setOf_and] ; apply (isClosed_ùìó hU).inter
  simp only [setOf_forall, MapsTo]
  apply isClosed_biInter ; intro K hK
  apply isClosed_biInter ; intro z hz
  apply (hQ K hK).isClosed.preimage
  exact ((UniformOnFun.uniformContinuous_eval_of_mem ‚ÑÇ (compacts U)
    (mem_singleton z) ‚ü®singleton_subset_iff.2 (hK.1 hz), isCompact_singleton‚ü©).continuous)

-- `ùìú U` : holomorphic functions to the unit closed ball

def ùìú (U : Set ‚ÑÇ) := {f ‚àà ùìó U | MapsTo f U (closedBall (0 : ‚ÑÇ) 1)}

lemma ùìú_eq_ùìë : ùìú U = ùìë U (fun _ => closedBall 0 1) := ùìë_const.symm

lemma IsClosed_ùìú (hU : IsOpen U) : IsClosed (ùìú U) := by
  suffices h : IsClosed {f : ùìí U | MapsTo f U (closedBall 0 1)} by
    exact (isClosed_ùìó hU).inter h
  simp_rw [MapsTo, setOf_forall]
  refine isClosed_biInter (Œª z hz => isClosed_ball.preimage ?_)
  exact ((UniformOnFun.uniformContinuous_eval_of_mem ‚ÑÇ (compacts U)
    (mem_singleton z) ‚ü®singleton_subset_iff.2 hz, isCompact_singleton‚ü©).continuous)

-- `ùìò U` : holomorphic injections into the unit ball

def ùìò (U : Set ‚ÑÇ) := {f ‚àà ùìú U | InjOn f U}

lemma ùìò_nonempty [good_domain U] : (ùìò U).Nonempty := by
  obtain ‚ü®u, hu‚ü© := nonempty_compl.mpr (good_domain.ne_univ : U ‚â† univ)
  let f : ‚ÑÇ ‚Üí ‚ÑÇ := Œª z => z - u
  have f_inj : Injective f := Œª _ _ h => sub_left_inj.mp h
  have f_hol : DifferentiableOn ‚ÑÇ f U := differentiableOn_id.sub (differentiableOn_const u)
  have f_noz : ‚àÄ ‚¶Éz : ‚ÑÇ‚¶Ñ, z ‚àà U -> f z ‚â† 0 := Œª z hz f0 => hu (sub_eq_zero.mp f0 ‚ñ∏ hz)

  obtain ‚ü®g, g_hol, g_sqf‚ü© := good_domain.has_sqrt f f_noz f_hol
  obtain ‚ü®z‚ÇÄ, hz‚ÇÄ‚ü© := (good_domain.is_nonempty : U.Nonempty)

  have gU_nhd : g '' U ‚àà ùìù (g z‚ÇÄ) := by
    have e1 : U ‚àà ùìù z‚ÇÄ := good_domain.is_open.mem_nhds hz‚ÇÄ
    have e2 := g_hol.analyticAt e1
    have f_eq_comp := (good_domain.is_open.eventually_mem hz‚ÇÄ).mono g_sqf
    have dg_nonzero : deriv g z‚ÇÄ ‚â† 0 := by
      have e3 := e2.differentiableAt.deriv_eq_deriv_pow_div_pow zero_lt_two f_eq_comp (f_noz hz‚ÇÄ)
      simp [e3, deriv_sub_const, f]
      intro h
      have := g_sqf hz‚ÇÄ
      rw [Pi.pow_apply, h, zero_pow two_ne_zero] at this
      cases f_noz hz‚ÇÄ this
    refine e2.eventually_constant_or_nhds_le_map_nhds.resolve_left (Œª h => ?_) (image_mem_map e1)
    simp [EventuallyEq.deriv_eq h] at dg_nonzero

  obtain ‚ü®r, r_pos, hr‚ü© := Metric.mem_nhds_iff.mp gU_nhd
  let gg : embedding U ((closedBall (- g z‚ÇÄ) (r / 2))·∂ú) :=
  { to_fun := g,
    is_diff := g_hol,
    is_inj := Œª z‚ÇÅ hz‚ÇÅ z‚ÇÇ hz‚ÇÇ hgz => f_inj (by simp [g_sqf _, hz‚ÇÅ, hz‚ÇÇ, hgz]),
    maps_to := Œª z hz hgz => by {
      apply f_noz hz
      rw [mem_closed_ball_neg_iff_mem_neg_closed_ball] at hgz
      obtain ‚ü®z', hz', hgz'‚ü© := (closedBall_subset_ball (by linarith)).trans hr hgz
      have hzz' : z = z' := f_inj (by simp [g_sqf hz, g_sqf hz', hgz'])
      simpa [hzz', neg_eq_self_iff, g_sqf hz'] using hgz'.symm } }

  let ggg := (embedding.inv _ (by linarith)).comp gg
  refine ‚ü®ggg.to_fun, ‚ü®ggg.is_diff, ?_‚ü©, ggg.is_inj‚ü©
  exact Œª z hz => ball_subset_closedBall (ggg.maps_to hz)

-- `ùìô U` : the closure of `ùìò U`, injections and constants

def ùìô (U : Set ‚ÑÇ) := {f ‚àà ùìú U | InjOn f U ‚à® ‚àÉ w : ‚ÑÇ, EqOn f (Œª _ => w) U}

lemma ùìò_subset_ùìô : ùìò U ‚äÜ ùìô U := Œª _ hf => ‚ü®hf.1, Or.inl hf.2‚ü©

import RMT4.to_mathlib
import Mathlib.Topology.MetricSpace.Polish

open intervalIntegral Real MeasureTheory Filter Topology Set Metric

variable {a b t : ‚Ñù} {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} {i‚ÇÄ w‚ÇÄ : ‚ÑÇ} {C : ‚Ñù}

section definitions

/-- We start with a basic definition of the integral of a function along a path, which makes sense
  when the path is differentiable -/

noncomputable def curvint (t‚ÇÅ t‚ÇÇ : ‚Ñù) (f : ‚ÑÇ ‚Üí ‚ÑÇ) (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ) : ‚ÑÇ :=
  ‚à´ t in t‚ÇÅ..t‚ÇÇ, deriv Œ≥ t ‚Ä¢ f (Œ≥ t)

/-- Version with `deriv_within` is useful -/

noncomputable def curvint' (t‚ÇÅ t‚ÇÇ : ‚Ñù) (f : ‚ÑÇ ‚Üí ‚ÑÇ) (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ) : ‚ÑÇ :=
  ‚à´ t in t‚ÇÅ..t‚ÇÇ, derivWithin Œ≥ (Set.uIcc t‚ÇÅ t‚ÇÇ) t ‚Ä¢ f (Œ≥ t)

lemma curvint'_eq_curvint {f : ‚ÑÇ ‚Üí ‚ÑÇ} {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} : curvint' a b f Œ≥ = curvint a b f Œ≥ :=
  integral_congr_uIoo (Œª _ ht => congr_arg‚ÇÇ _ (derivWithin_of_mem_uIoo ht) rfl)

end definitions

section derivcurvint

variable
  {t‚ÇÅ t‚ÇÇ : ‚Ñù} {F F' : ‚ÑÇ ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ}

theorem hasDerivAt_curvint (ht : t‚ÇÅ < t‚ÇÇ)
    (Œ≥_diff : ContDiffOn ‚Ñù 1 Œ≥ (Icc t‚ÇÅ t‚ÇÇ))
    (F_cont : ‚àÄ·∂† i in ùìù i‚ÇÄ, ContinuousOn (F i) (Œ≥ '' Icc t‚ÇÅ t‚ÇÇ))
    (F_deri : ‚àÄ·∂† i in ùìù i‚ÇÄ, ‚àÄ t ‚àà Icc t‚ÇÅ t‚ÇÇ, HasDerivAt (Œª i => F i (Œ≥ t)) (F' i (Œ≥ t)) i)
    (F'_cont : ContinuousOn (F' i‚ÇÄ) (Œ≥ '' Icc t‚ÇÅ t‚ÇÇ))
    (F'_norm : ‚àÄ·∂† i in ùìù i‚ÇÄ, ‚àÄ t ‚àà Icc t‚ÇÅ t‚ÇÇ, ‚ÄñF' i (Œ≥ t)‚Äñ ‚â§ C)
    :
    HasDerivAt (Œª i => curvint t‚ÇÅ t‚ÇÇ (F i) Œ≥) (curvint t‚ÇÅ t‚ÇÇ (F' i‚ÇÄ) Œ≥) i‚ÇÄ := by
  simp_rw [‚Üê curvint'_eq_curvint]
  set Œº : Measure ‚Ñù := volume.restrict (Ioc t‚ÇÅ t‚ÇÇ)
  set œÜ : ‚ÑÇ ‚Üí ‚Ñù ‚Üí ‚ÑÇ := Œª i t => derivWithin Œ≥ (Icc t‚ÇÅ t‚ÇÇ) t ‚Ä¢ F i (Œ≥ t)
  set œà : ‚ÑÇ ‚Üí ‚Ñù ‚Üí ‚ÑÇ := Œª i t => derivWithin Œ≥ (Icc t‚ÇÅ t‚ÇÇ) t ‚Ä¢ F' i (Œ≥ t)
  obtain ‚ü®Œ¥, hŒ¥, h_in_Œ¥‚ü© := eventually_nhds_iff_ball.mp (F_deri.and F'_norm)
  simp only [curvint']

  have Œ≥'_cont : ContinuousOn (derivWithin Œ≥ (Icc t‚ÇÅ t‚ÇÇ)) (Icc t‚ÇÅ t‚ÇÇ) :=
    Œ≥_diff.continuousOn_derivWithin (uniqueDiffOn_Icc ht) le_rfl
  obtain ‚ü®C', h‚ü© := (isCompact_Icc.image_of_continuousOn Œ≥'_cont).isBounded.subset_ball 0

  have œÜ_cont : ‚àÄ·∂† i in ùìù i‚ÇÄ, ContinuousOn (œÜ i) (Icc t‚ÇÅ t‚ÇÇ) := by
    filter_upwards [F_cont] with i h
    exact Œ≥'_cont.smul (h.comp Œ≥_diff.continuousOn (mapsTo_image _ _))

  have œÜ_meas : ‚àÄ·∂† i in ùìù i‚ÇÄ, AEStronglyMeasurable (œÜ i) Œº := by
    filter_upwards [œÜ_cont] with i h
    exact (h.mono Ioc_subset_Icc_self).aestronglyMeasurable measurableSet_Ioc

  have œÜ_intg : Integrable (œÜ i‚ÇÄ) Œº :=
    œÜ_cont.self_of_nhds.integrableOn_Icc.mono_set Ioc_subset_Icc_self

  have œÜ_deri : ‚àÄ·µê t ‚àÇŒº, ‚àÄ i ‚àà ball i‚ÇÄ Œ¥, HasDerivAt (Œª j => œÜ j t) (œà i t) i := by
    refine (ae_restrict_iff' measurableSet_Ioc).mpr (eventually_of_forall ?_)
    intro t ht i hi
    apply ((h_in_Œ¥ i hi).1 t (Ioc_subset_Icc_self ht)).const_smul

  have œà_cont : ContinuousOn (œà i‚ÇÄ) (Icc t‚ÇÅ t‚ÇÇ) :=
    Œ≥'_cont.smul (F'_cont.comp Œ≥_diff.continuousOn (mapsTo_image _ _))

  have œà_meas : AEStronglyMeasurable (œà i‚ÇÄ) Œº :=
    (œà_cont.mono Ioc_subset_Icc_self).aestronglyMeasurable measurableSet_Ioc

  have œà_norm : ‚àÄ·µê t ‚àÇŒº, ‚àÄ x ‚àà ball i‚ÇÄ Œ¥, ‚Äñœà x t‚Äñ ‚â§ C' * C := by
    refine (ae_restrict_iff' measurableSet_Ioc).mpr (eventually_of_forall (Œª t ht w hw => ?_))
    rw [norm_smul]
    have e1 := mem_closedBall_zero_iff.mp $
      ball_subset_closedBall (h (mem_image_of_mem _ (Ioc_subset_Icc_self ht)))
    have e2 := (h_in_Œ¥ w hw).2 t (Ioc_subset_Icc_self ht)
    exact mul_le_mul e1 e2 (norm_nonneg _) ((norm_nonneg _).trans e1)

  have hC : Integrable (Œª (_ : ‚Ñù) => C' * C) Œº := integrable_const _

  simpa [curvint', intervalIntegral, ht.le] using
    (hasDerivAt_integral_of_dominated_loc_of_deriv_le hŒ¥ œÜ_meas œÜ_intg œà_meas œà_norm hC œÜ_deri).2

end derivcurvint

section bla

variable {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} {œÜ œÜ' : ‚Ñù ‚Üí ‚Ñù} {f : ‚ÑÇ ‚Üí ‚ÑÇ}

theorem cdv
    (œÜ_diff : ContDiffOn ‚Ñù 1 œÜ (uIcc a b))
    (œÜ_maps : œÜ '' uIcc a b = uIcc (œÜ a) (œÜ b))
    (Œ≥_diff : ContDiffOn ‚Ñù 1 Œ≥ (uIcc (œÜ a) (œÜ b)))
    (f_cont : ContinuousOn f (Œ≥ '' uIcc (œÜ a) (œÜ b)))
    :
    curvint (œÜ a) (œÜ b) f Œ≥ = curvint a b f (Œ≥ ‚àò œÜ) := by
  have l1 : ContinuousOn (fun x => derivWithin Œ≥ (uIcc (œÜ a) (œÜ b)) x ‚Ä¢ f (Œ≥ x)) (œÜ '' uIcc a b) := by
    have e1 := Œ≥_diff.continuousOn_derivWithin'' le_rfl
    have e2 := f_cont.comp Œ≥_diff.continuousOn (mapsTo_image _ _)
    simpa only [œÜ_maps] using e1.smul e2
  simp_rw [‚Üê curvint'_eq_curvint, curvint', ‚Üê œÜ_diff.integral_derivWithin_smul_comp l1]
  refine integral_congr_uIoo (Œª t ht => ?_)
  have l2 : MapsTo œÜ (uIcc a b) (uIcc (œÜ a) (œÜ b)) := œÜ_maps ‚ñ∏ mapsTo_image _ _
  have l6 : t ‚àà uIcc a b := uIoo_subset_uIcc ht
  have l3 : DifferentiableWithinAt ‚Ñù Œ≥ (uIcc (œÜ a) (œÜ b)) (œÜ t) := Œ≥_diff.differentiableOn le_rfl (œÜ t) (l2 l6)
  have l4 : DifferentiableWithinAt ‚Ñù œÜ (uIcc a b) t := (œÜ_diff t l6).differentiableWithinAt le_rfl
  have l5 : UniqueDiffWithinAt ‚Ñù (uIcc a b) t := uniqueDiffWithinAt_of_mem_nhds (uIcc_mem_nhds ht)
  simp [derivWithin.scomp t l3 l4 l2 l5] ; ring

end bla

namespace holo

noncomputable def f1 (f : ‚ÑÇ ‚Üí ‚ÑÇ) (Œì : ‚ÑÇ ‚Üí ‚Ñù ‚Üí ‚ÑÇ) (w : ‚ÑÇ) (t : ‚Ñù) : ‚ÑÇ :=
  deriv (Œì w) t * f (Œì w t)

noncomputable def f2 (f f' : ‚ÑÇ ‚Üí ‚ÑÇ) (Œì Œì' : ‚ÑÇ ‚Üí ‚Ñù ‚Üí ‚ÑÇ) (w : ‚ÑÇ) (t : ‚Ñù) : ‚ÑÇ :=
  deriv (Œì' w) t * f (Œì w t) + Œì' w t * deriv (Œì w) t * f' (Œì w t)

noncomputable def f3 (f : ‚ÑÇ ‚Üí ‚ÑÇ) (Œì Œì' : ‚ÑÇ ‚Üí ‚Ñù ‚Üí ‚ÑÇ) (w : ‚ÑÇ) (t : ‚Ñù) : ‚ÑÇ :=
  Œì' w t * f (Œì w t)

/-- This gathers a lot of info that is enough to prove `holo.holo`, but it is a real mess and as
  stated it is not clear that any non-constant function satisfies the assumptions. TODO:
  - restrict to appropriate domains
  - use `ContDiffOn` instead of separate assumptions
  - actually prove `key` and `L` -/

structure setup (f f' : ‚ÑÇ ‚Üí ‚ÑÇ) (Œì Œì' : ‚ÑÇ ‚Üí ‚Ñù ‚Üí ‚ÑÇ) where
  df : ‚àÄ z, HasDerivAt f (f' z) z
  cf' : Continuous f'
  dŒì : ‚àÄ w, Differentiable ‚Ñù (Œì w)
  dŒì' : ‚àÄ w, Differentiable ‚Ñù (Œì' w)
  cdŒì : ‚àÄ w, Continuous (deriv (Œì w))
  cdŒì' : ‚àÄ w, Continuous (deriv (Œì' w))
  key : ‚àÄ w t, HasDerivAt (fun w => f1 f Œì w t) (f2 f f' Œì Œì' w t) w
  L : ‚àÄ t, LipschitzOnWith (nnabs 1) (fun x => f1 f Œì x t) (ball w‚ÇÄ 1)

variable {f f' : ‚ÑÇ ‚Üí ‚ÑÇ} {Œì Œì' : ‚ÑÇ ‚Üí ‚Ñù ‚Üí ‚ÑÇ}

lemma setup.cfŒì (S : setup (w‚ÇÄ := w‚ÇÄ) f f' Œì Œì') (w : ‚ÑÇ) : Continuous (f ‚àò Œì w) := by
  simpa [continuous_iff_continuousAt]
    using Œª t => (S.df (Œì w t)).continuousAt.comp (S.dŒì w t).continuousAt

lemma setup.dfŒì (S : setup (w‚ÇÄ := w‚ÇÄ) f f' Œì Œì') (w : ‚ÑÇ) : Differentiable ‚Ñù (Œª t => f (Œì w t)) := by
  intro t
  apply ((S.df (Œì w t)).differentiableAt.restrictScalars ‚Ñù).comp
  exact (S.dŒì w t)

lemma setup.continuous_f2 (S : setup (w‚ÇÄ := w‚ÇÄ) f f' Œì Œì') (w : ‚ÑÇ) : Continuous (f2 f f' Œì Œì' w) := by
  unfold f2
  have := S.cf'
  have := S.cdŒì w
  have := S.cdŒì' w
  have := (S.dfŒì w).continuous
  have := (S.dŒì w).continuous
  have := (S.dŒì' w).continuous
  continuity

variable {a b : ‚Ñù} {f f' : ‚ÑÇ ‚Üí ‚ÑÇ} {Œì Œì' : ‚ÑÇ ‚Üí ‚Ñù ‚Üí ‚ÑÇ}

theorem main_step (hab : a ‚â§ b) (S : setup (w‚ÇÄ := w‚ÇÄ) f f' Œì Œì') :
    HasDerivAt (fun w => ‚à´ (t : ‚Ñù) in a..b, f1 f Œì w t)
      (‚à´ (t : ‚Ñù) in a..b, f2 f f' Œì Œì' w‚ÇÄ t) w‚ÇÄ := by
    apply has_deriv_at_integral_of_continuous_of_lip (C := 1) hab -- or whatever
    ¬∑ exact zero_lt_one
    ¬∑ exact eventually_of_forall (Œª z => ((S.cdŒì _).mul (S.cfŒì _)).continuousOn)
    ¬∑ exact Œª _ _ => S.key _ _
    ¬∑ exact Œª _ _ => S.L _
    ¬∑ exact (S.continuous_f2 w‚ÇÄ).continuousOn

lemma identity (S : setup (w‚ÇÄ := w‚ÇÄ) f f' Œì Œì') (w : ‚ÑÇ) (t : ‚Ñù) :
    deriv (f3 f Œì Œì' w) t = f2 f f' Œì Œì' w t := by
  unfold f2 f3
  rw [deriv_mul (S.dŒì' _).differentiableAt (S.dfŒì _).differentiableAt]
  simp only [add_right_inj]
  change Œì' w t * deriv (f ‚àò Œì w) t = Œì' w t * deriv (Œì w) t * f' (Œì w t)
  rw [‚Üê (S.df (Œì w t)).deriv, deriv.comp _ (S.df _).differentiableAt (S.dŒì _).differentiableAt]
  ring

theorem holo (hab : a ‚â§ b) (S : setup (w‚ÇÄ := w‚ÇÄ) f f' Œì Œì') :
    HasDerivAt (fun w => curvint a b f (Œì w))
      (Œì' w‚ÇÄ b * f (Œì w‚ÇÄ b) - Œì' w‚ÇÄ a * f (Œì w‚ÇÄ a)) w‚ÇÄ := by
  have : HasDerivAt (fun w => ‚à´ (t : ‚Ñù) in a..b, f1 f Œì w t)
    (‚à´ (t : ‚Ñù) in a..b, f2 f f' Œì Œì' w‚ÇÄ t) w‚ÇÄ := main_step hab S
  convert ‚Üê this
  simp only [‚Üê identity S]
  unfold f3
  apply intervalIntegral.integral_deriv_eq_sub' _ rfl
  ¬∑ intro t _
    apply (S.dŒì' _).mul
    have := S.dfŒì w‚ÇÄ
    exact S.dfŒì _
  ¬∑ apply Continuous.continuousOn
    have : deriv (fun t => Œì' w‚ÇÄ t * f (Œì w‚ÇÄ t)) =
      (Œª t => deriv (Œì' w‚ÇÄ) t * f (Œì w‚ÇÄ t) + Œì' w‚ÇÄ t * deriv (Œì w‚ÇÄ) t * f' (Œì w‚ÇÄ t)) := by
      ext1 t ; exact identity S w‚ÇÄ t
    rw [this]
    exact S.continuous_f2 w‚ÇÄ

end holo

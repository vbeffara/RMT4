import Mathlib

set_option autoImplicit false

local notation "ùïÄ" => unitInterval

open Complex

variable {V : Type} [NormedAddCommGroup V] [NormedSpace ‚Ñù V] {w z : V}
  {t x x‚ÇÅ x‚ÇÇ y y‚ÇÅ y‚ÇÇ a b : ‚Ñù} {f : ‚ÑÇ ‚Üí ‚ÑÇ} {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ}

noncomputable def RectangleIntegral (f : ‚ÑÇ ‚Üí ‚ÑÇ) (z w : ‚ÑÇ) : ‚ÑÇ :=
    ((‚à´ x : ‚Ñù in z.re..w.re, f (x + z.im * I)) - (‚à´ x : ‚Ñù in z.re..w.re, f (x + w.im * I))
     + I ‚Ä¢ (‚à´ y : ‚Ñù in z.im..w.im, f (w.re + y * I)) - I ‚Ä¢ ‚à´ y : ‚Ñù in z.im..w.im, f (z.re + y * I))

structure C1Path where
  toFun : ‚Ñù ‚Üí ‚ÑÇ
  contDiffOn : ContDiffOn ‚Ñù 1 toFun ùïÄ

noncomputable def concat (Œì‚ÇÅ Œì‚ÇÇ : C1Path) (h0 : Œì‚ÇÅ.toFun 1 = Œì‚ÇÇ.toFun 0)
    (h1 : derivWithin Œì‚ÇÅ.toFun ùïÄ 1 = derivWithin Œì‚ÇÇ.toFun ùïÄ 0) : C1Path where
  toFun t := if t ‚â§ 0.5 then Œì‚ÇÅ.toFun (2 * t) else Œì‚ÇÇ.toFun (2 * t - 1)
  contDiffOn := by
    refine (contDiffOn_succ_iff_derivWithin uniqueDiffOn_Icc_zero_one).mpr ‚ü®?_, ?_‚ü©
    ¬∑ sorry
    ¬∑ sorry

noncomputable def cint (f : ‚ÑÇ ‚Üí ‚ÑÇ) (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ) (a b : ‚Ñù) : ‚ÑÇ := ‚à´ t in a..b, deriv Œ≥ t ‚Ä¢ f (Œ≥ t)

noncomputable def C1Int (f : ‚ÑÇ ‚Üí ‚ÑÇ) (Œì : C1Path) : ‚ÑÇ := cint f Œì.toFun 0 1

abbrev œÜ : ‚Ñù ‚Üí ‚Ñù := fun t => 3 * t ^ 2 - 2 * t ^ 3
abbrev œÜ' : ‚Ñù ‚Üí ‚Ñù := fun t => 6 * t - 6 * t ^ 2

@[simp] theorem œÜ_zero : œÜ 0 = 0 := by norm_num
@[simp] theorem œÜ_one : œÜ 1 = 1 := by norm_num
@[simp] theorem œÜ'_zero : œÜ' 0 = 0 := by norm_num
@[simp] theorem œÜ'_one : œÜ' 1 = 0 := by norm_num

theorem œÜ_hasderiv : HasDerivAt œÜ (œÜ' t) t := by
  have h1 : HasDerivAt (fun x => x ^ 2) (2 * t) t := by simpa using hasDerivAt_pow 2 t
  have h2 : HasDerivAt (fun x => x ^ 3) (3 * t ^ 2) t := hasDerivAt_pow 3 t
  have h3 : HasDerivAt (fun x => 3 * x ^ 2) (6 * t) t := by
    convert h1.const_mul 3 using 1 ; ring
  have h4 : HasDerivAt (fun x => 2 * x ^ 3) (6 * t ^ 2) t := by
    convert h2.const_mul 2 using 1 ; ring
  exact h3.sub h4

@[simp] theorem œÜ_deriv : deriv œÜ t = œÜ' t := œÜ_hasderiv.deriv

theorem œÜ'_continuous : Continuous œÜ' := by continuity

noncomputable abbrev Œ¶ (w z : V) (t : ‚Ñù) : V := w + œÜ t ‚Ä¢ (z - w)
noncomputable abbrev Œ¶' (w z : V) (t : ‚Ñù) : V := œÜ' t ‚Ä¢ (z - w)

theorem Œ¶_hasderiv : HasDerivAt (Œ¶ w z) (Œ¶' w z t) t := (œÜ_hasderiv.smul_const _).const_add _

@[simp] theorem Œ¶_deriv : deriv (Œ¶ w z) = Œ¶' w z := by ext1 t; exact Œ¶_hasderiv.deriv
@[simp] theorem Œ¶_zero : Œ¶ w z 0 = w := by simp
@[simp] theorem Œ¶_one : Œ¶ w z 1 = z := by simp [Œ¶]
@[simp] theorem Œ¶'_zero : Œ¶' w z 0 = 0 := by simp
@[simp] theorem Œ¶'_one : Œ¶' w z 1 = 0 := by simp

theorem Œ¶'_continuous : Continuous (Œ¶' w z) := œÜ'_continuous.smul continuous_const

noncomputable def Œ® (w z : ‚ÑÇ) : C1Path where
  toFun := Œ¶ w z
  contDiffOn := by
    apply ContDiff.contDiffOn
    apply contDiff_succ_iff_deriv.mpr
    constructor
    ¬∑ exact fun t => Œ¶_hasderiv.differentiableAt
    ¬∑ simpa only [Nat.zero_eq, CharP.cast_eq_zero, contDiff_zero, Œ¶_deriv] using Œ¶'_continuous

noncomputable def LineIntegral (f : ‚ÑÇ ‚Üí ‚ÑÇ) (z w : ‚ÑÇ) : ‚ÑÇ := C1Int f (Œ® z w)

theorem SideIntegral_eq_LineIntegral {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : Continuous f) :
    ‚à´ x : ‚Ñù in x‚ÇÅ..x‚ÇÇ, f (x + y * I) = LineIntegral f (x‚ÇÅ + y * I) (x‚ÇÇ + y * I) := by
  have := @intervalIntegral.integral_comp_smul_deriv ‚ÑÇ _ _ 0 1 (Œ¶ x‚ÇÅ x‚ÇÇ) (Œ¶' x‚ÇÅ x‚ÇÇ)
    (Œª x => f (x + y * I)) (fun _ _ => Œ¶_hasderiv) Œ¶'_continuous.continuousOn (by continuity)
  rw [Œ¶_zero, Œ¶_one] at this
  rw [‚Üê this]
  apply intervalIntegral.integral_congr
  intro t _
  simp only [Œ®, Œ¶, Œ¶_deriv, Œ¶', œÜ']
  simp; left; ring_nf

theorem SideIntegral_eq_LineIntegral' {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : Continuous f) :
    I * ‚à´ y : ‚Ñù in y‚ÇÅ..y‚ÇÇ, f (x + y * I) = LineIntegral f (x + y‚ÇÅ * I) (x + y‚ÇÇ * I) := by
  have := @intervalIntegral.integral_comp_smul_deriv ‚ÑÇ _ _ 0 1 (Œ¶ y‚ÇÅ y‚ÇÇ) (Œ¶' y‚ÇÅ y‚ÇÇ)
    (Œª y => f (x + y * I)) (fun _ _ => Œ¶_hasderiv) Œ¶'_continuous.continuousOn (by continuity)
  rw [Œ¶_zero, Œ¶_one] at this
  rw [‚Üê this]
  rw [‚Üê intervalIntegral.integral_const_mul]
  apply intervalIntegral.integral_congr
  intro t _
  simp only [Œ¶, Œ¶_deriv, Œ¶', œÜ', Œ®]
  simp ; ring_nf

def zw (z w : ‚ÑÇ) : ‚ÑÇ := w.re + z.im * I

theorem RectangleIntegral_of_LineIntegral {z w : ‚ÑÇ} (hf : Continuous f) : RectangleIntegral f z w =
    LineIntegral f z (zw z w) + LineIntegral f (zw z w) w + LineIntegral f w (zw w z) +
    LineIntegral f (zw w z) z := by
  simp_rw [RectangleIntegral, smul_eq_mul, sub_eq_add_neg, ‚Üê mul_neg]
  simp_rw [‚Üê intervalIntegral.integral_symm]
  simp_rw [SideIntegral_eq_LineIntegral hf, SideIntegral_eq_LineIntegral' hf]
  simp [zw]; abel

noncomputable abbrev RC (z w : ‚ÑÇ) (t : ‚Ñù) : ‚ÑÇ :=
  if t ‚â§ 1 then Œ¶ z (zw z w) t else
  if t ‚â§ 2 then Œ¶ (zw z w) w (t - 1) else
  if t ‚â§ 3 then Œ¶ w (zw w z) (t - 2) else
  Œ¶ (zw w z) z (t - 3)

noncomputable def RRCC (z w : ‚ÑÇ) : C1Path := by
  let p1 := concat (Œ® z (zw z w)) (Œ® (zw z w) w) (by simp [Œ®]) sorry
  let p2 := concat (Œ® w (zw w z)) (Œ® (zw w z) z) (by simp [Œ®]) sorry
  exact concat p1 p2 sorry sorry

theorem RC_1 {z w : ‚ÑÇ} (ht : t ‚àà Set.uIcc 0 1) : RC z w t = Œ¶ z (zw z w) t := sorry
theorem RC_2 {z w : ‚ÑÇ} (ht : t ‚àà Set.uIcc 1 2) : RC z w t = Œ¶ (zw z w) w (t - 1) := sorry
theorem RC_3 {z w : ‚ÑÇ} (ht : t ‚àà Set.uIcc 2 3) : RC z w t = Œ¶ w (zw w z) (t - 2) := sorry
theorem RC_4 {z w : ‚ÑÇ} (ht : t ‚àà Set.uIcc 3 4) : RC z w t = Œ¶ (zw w z) z (t - 3) := sorry

noncomputable abbrev RC' (z w : ‚ÑÇ) (t : ‚Ñù) : ‚ÑÇ :=
  if t ‚â§ 1 then Œ¶' z (zw z w) t else
  if t ‚â§ 2 then Œ¶' (zw z w) w (t - 1) else
  if t ‚â§ 3 then Œ¶' w (zw w z) (t - 2) else
  Œ¶' (zw w z) z (t - 3)

theorem RC'_1 {z w : ‚ÑÇ} (ht : t ‚àà Set.uIcc 0 1) : RC' z w t = Œ¶' z (zw z w) t := sorry
theorem RC'_2 {z w : ‚ÑÇ} (ht : t ‚àà Set.uIcc 1 2) : RC' z w t = Œ¶' (zw z w) w (t - 1) := sorry
theorem RC'_3 {z w : ‚ÑÇ} (ht : t ‚àà Set.uIcc 2 3) : RC' z w t = Œ¶' w (zw w z) (t - 2) := sorry
theorem RC'_4 {z w : ‚ÑÇ} (ht : t ‚àà Set.uIcc 3 4) : RC' z w t = Œ¶' (zw w z) z (t - 3) := sorry

theorem RC_hasderiv {z w : ‚ÑÇ} {t : ‚Ñù} : HasDerivAt (RC z w) (RC' z w t) t := by sorry
@[simp] theorem RC_deriv {z w : ‚ÑÇ} {t : ‚Ñù} : deriv (RC z w) t = RC' z w t := RC_hasderiv.deriv

theorem side_1 {z w : ‚ÑÇ} :
    ‚à´ x in (0 : ‚Ñù)..1, RC' z w x ‚Ä¢ f (RC z w x) = LineIntegral f z (zw z w) := by
  apply intervalIntegral.integral_congr
  intro t ht
  simp [RC_1, RC'_1, ht, Œ¶_deriv]

theorem side_2 {z w : ‚ÑÇ} :
    ‚à´ x in (1 : ‚Ñù)..2, RC' z w x ‚Ä¢ f (RC z w x) = LineIntegral f (zw z w) w := by
  have e1 : (1 : ‚Ñù) = 0 + 1 := by norm_num
  have e2 : (2 : ‚Ñù) = 1 + 1 := by norm_num
  rw [e1, e2, ‚Üê intervalIntegral.integral_comp_add_right]
  apply intervalIntegral.integral_congr
  intro t ht
  have ht' : t + 1 ‚àà Set.uIcc 1 2 := sorry
  simp [RC_2, RC'_2, ht', Œ¶_deriv]

theorem side_3 {z w : ‚ÑÇ} :
    ‚à´ x in (2 : ‚Ñù)..3, RC' z w x ‚Ä¢ f (RC z w x) = LineIntegral f w (zw w z) := by
  have e1 : (2 : ‚Ñù) = 0 + 2 := by norm_num
  have e2 : (3 : ‚Ñù) = 1 + 2 := by norm_num
  rw [e1, e2, ‚Üê intervalIntegral.integral_comp_add_right]
  apply intervalIntegral.integral_congr
  intro t ht
  have ht' : t + 1 ‚àà Set.uIcc 1 2 := sorry
  simp [RC_2, RC'_2, ht', Œ¶_deriv]

theorem side_4 {z w : ‚ÑÇ} :
  ‚à´ x in (3 : ‚Ñù)..4, RC' z w x ‚Ä¢ f (RC z w x) = LineIntegral f (zw w z) z := by sorry

theorem main_result {z w : ‚ÑÇ} (hf : Continuous f) :
    RectangleIntegral f z w = cint f (RC z w) 0 4 := by
  rw [RectangleIntegral_of_LineIntegral hf, cint]
  rw [‚Üê intervalIntegral.integral_add_adjacent_intervals (a := 0) (b := 1)]
  rw [‚Üê intervalIntegral.integral_add_adjacent_intervals (a := 1) (b := 2)]
  rw [‚Üê intervalIntegral.integral_add_adjacent_intervals (a := 2) (b := 3)]
  simp_rw [RC_deriv, side_1, side_2, side_3, side_4] ; abel
  sorry

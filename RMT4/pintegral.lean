import RMT4.LocallyConstant
import RMT4.Primitive
import RMT4.Subdivision

open BigOperators Metric Set Subdivision Topology Filter Nat

structure LocalPrimitiveOn (s : Set ‚ÑÇ) (f : ‚ÑÇ ‚Üí ‚ÑÇ) :=
  F : s ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ
  S : s ‚Üí Set ‚ÑÇ
  mem (z : s) : z.1 ‚àà S z
  opn (z : s) : IsOpen (S z)
  der (z : s) : ‚àÄ w ‚àà S z, HasDerivAt (F z) (f w) w

namespace LocalPrimitiveOn

lemma nhd (h : LocalPrimitiveOn s f) (z : s) : h.S z ‚àà ùìù z.1 :=
  (h.opn z).mem_nhds (h.mem z)

def restrict (Œõ : LocalPrimitiveOn s f) (h : t ‚äÜ s) : LocalPrimitiveOn t f where
  F := Œõ.F ‚àò inclusion h
  S := Œõ.S ‚àò inclusion h
  mem z := Œõ.mem (inclusion h z)
  opn z := Œõ.opn (inclusion h z)
  der z := Œõ.der (inclusion h z)

def zero : LocalPrimitiveOn univ 0 where
  F _ := 0
  S _ := univ
  mem _ := mem_univ _
  opn _ := isOpen_univ
  der _ _ _ := hasDerivAt_const _ _

protected noncomputable def deriv {{U : Set ‚ÑÇ}}  (hU : IsOpen U) {{F : ‚ÑÇ ‚Üí ‚ÑÇ}}
    (hF : DifferentiableOn ‚ÑÇ F U) : LocalPrimitiveOn U (deriv F) where
  F _ := F
  S _ := U
  mem z := z.2
  opn _ := hU
  der _ _ hw := DifferentiableAt.hasDerivAt (hF.differentiableAt (hU.mem_nhds hw))

noncomputable def inradius {U : Set ‚ÑÇ} (hU : IsOpen U) (hz : z ‚àà U) :
    {Œµ // 0 < Œµ ‚àß ball z Œµ ‚äÜ U} := by
  choose Œµ Œµ_pos hŒµ using isOpen_iff.1 hU z hz
  exact ‚ü®Œµ, Œµ_pos, hŒµ‚ü©

lemma hasDerivAt_inradius {U : Set ‚ÑÇ} (hU : IsOpen U) (hf : DifferentiableOn ‚ÑÇ f U) (hz‚ÇÄ : z‚ÇÄ ‚àà U)
    (hz : z ‚àà ball z‚ÇÄ (inradius hU hz‚ÇÄ)) : HasDerivAt (primitive f z‚ÇÄ) (f z) z := by
  have l1 : StarConvex ‚Ñù z‚ÇÄ (ball z‚ÇÄ (inradius hU hz‚ÇÄ)) :=
    (convex_ball _ _).starConvex (mem_ball_self (inradius hU hz‚ÇÄ).2.1)
  exact (hf.mono (inradius hU hz‚ÇÄ).2.2).exists_primitive l1 isOpen_ball hz

noncomputable def of_differentiableOn {U : Set ‚ÑÇ} (hU : IsOpen U) {f : ‚ÑÇ ‚Üí ‚ÑÇ}
    (h : DifferentiableOn ‚ÑÇ f U) : LocalPrimitiveOn U f where
  F z := primitive f z
  S z := ball z (inradius hU z.2)
  mem z := mem_ball_self (inradius hU z.2).2.1
  opn _ := isOpen_ball
  der z _ hw := hasDerivAt_inradius hU h z.2 hw

end LocalPrimitiveOn

def HasLocalPrimitiveOn (U : Set ‚ÑÇ) (f : ‚ÑÇ ‚Üí ‚ÑÇ) : Prop := Nonempty (LocalPrimitiveOn U f)

namespace HasLocalPrimitiveOn

lemma iff : HasLocalPrimitiveOn U f ‚Üî ‚àÄ z ‚àà U, ‚àÉ F, ‚àÄ·∂† w in ùìù z, HasDerivAt F (f w) w where
  mp := by
    intro ‚ü®F, S, mem, opn, der‚ü© z hz
    use F ‚ü®z, hz‚ü©
    apply eventually_of_mem ((opn ‚ü®z, hz‚ü©).mem_nhds (mem ‚ü®z, hz‚ü©))
    intro x hx
    exact der ‚ü®z, hz‚ü© x hx
  mpr h := by
    simp only [eventually_nhds_iff_ball] at h
    choose! F Œµ hŒµ h using h
    refine ‚ü®Œª z => F z, Œª z => ball z (Œµ z), ?_, ?_, ?_‚ü©
    ¬∑ exact Œª z => mem_ball_self $ hŒµ z z.2
    ¬∑ exact Œª z => isOpen_ball
    ¬∑ exact Œª z => h z z.2

lemma mono (h : HasLocalPrimitiveOn U f) (hVU : V ‚äÜ U) : HasLocalPrimitiveOn V f :=
  ‚ü®h.some.restrict hVU‚ü©

lemma zero : HasLocalPrimitiveOn s 0 := ‚ü®LocalPrimitiveOn.zero.restrict (subset_univ _)‚ü©

lemma deriv (hU : IsOpen U) (hF : DifferentiableOn ‚ÑÇ F U) : HasLocalPrimitiveOn U (deriv F) :=
  ‚ü®LocalPrimitiveOn.deriv hU hF‚ü©

lemma holo (hU : IsOpen U) (hF : DifferentiableOn ‚ÑÇ F U) : HasLocalPrimitiveOn U F :=
  ‚ü®LocalPrimitiveOn.of_differentiableOn hU hF‚ü©

end HasLocalPrimitiveOn

section pintegral

variable {a b : ‚Ñù} {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} {f : ‚ÑÇ ‚Üí ‚ÑÇ}

noncomputable def pintegral_aux (hab : a < b) (hŒ≥ : ContinuousOn Œ≥ (Icc a b))
    (Œõ : LocalPrimitiveOn (Œ≥ '' Icc a b) f) : ‚ÑÇ := by
  have h1 (t : Icc a b) : ‚àÉ i : Œ≥ '' Icc a b, Œõ.S i ‚àà ùìù (Œ≥ t) := ‚ü®‚ü®Œ≥ t, t, t.2, rfl‚ü©, Œõ.nhd _‚ü©
  obtain RW := (exists_reladapted hab hŒ≥ h1).some
  exact RW.œÉ.sumSubAlong (Œõ.F ‚àò RW.I) Œ≥

noncomputable def pintegral (a b : ‚Ñù) (f : ‚ÑÇ ‚Üí ‚ÑÇ) (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ) : ‚ÑÇ := by
  by_cases h : a < b ‚àß ContinuousOn Œ≥ (Icc a b) ‚àß HasLocalPrimitiveOn (Œ≥ '' Icc a b) f
  ¬∑ exact pintegral_aux h.1 h.2.1 h.2.2.some
  ¬∑ exact 0

lemma apply_eq_of_path (hab : a ‚â§ b) {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : IsLocallyConstant (U.restrict f))
    {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} (hŒ≥ : ContinuousOn Œ≥ (Icc a b)) (h : MapsTo Œ≥ (Icc a b) U) :
    f (Œ≥ b) = f (Œ≥ a) := by
  haveI : PreconnectedSpace (Icc a b) := isPreconnected_iff_preconnectedSpace.1 isPreconnected_Icc
  have h2 := hf.comp_continuous (hŒ≥.restrict_mapsTo h)
  exact @IsLocallyConstant.apply_eq_of_isPreconnected _ _ _ _ (h2) _ isPreconnected_univ
    ‚ü®b, hab, le_rfl‚ü© ‚ü®a, le_rfl, hab‚ü© (mem_univ _) (mem_univ _)

lemma sumSubAlong_eq_zero (hab : a < b) (Œõ : LocalPrimitiveOn U 0)
    (RW : RelAdaptedSubdivision a b Œõ.S Œ≥) (hŒ≥ : ContinuousOn Œ≥ (Icc a b)) :
    RW.œÉ.sumSubAlong (Œõ.F ‚àò RW.I) Œ≥ = 0 := by
  refine Subdivision.sum_eq_zero (Œª k => (sub_eq_zero.2 ?_))
  apply apply_eq_of_path (RW.œÉ.mono' hab).le
  ¬∑ apply isLocallyConstant_of_deriv_eq_zero (Œõ.opn (RW.I k))
    ¬∑ exact Œª z hz => (Œõ.der (RW.I k) z hz).differentiableAt.differentiableWithinAt
    ¬∑ exact Œª z hz => (Œõ.der (RW.I k) z hz).deriv
  ¬∑ exact hŒ≥.mono (RW.œÉ.piece_subset hab.le)
  ¬∑ exact mapsTo'.2 (RW.sub k)

@[simp] lemma pintegral_zero (hab : a < b) (hŒ≥ : ContinuousOn Œ≥ (Icc a b)) :
    pintegral a b 0 Œ≥ = 0 := by
  have : HasLocalPrimitiveOn (Œ≥ '' Icc a b) 0 := ‚ü®LocalPrimitiveOn.zero.restrict (subset_univ _)‚ü©
  simp [pintegral, hab, hŒ≥, this, pintegral_aux, sumSubAlong_eq_zero]

end pintegral

lemma sub_eq_sub_of_deriv_eq_deriv (hab : a ‚â§ b) (hU : IsOpen U)
    {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} (hŒ≥‚ÇÅ : ContinuousOn Œ≥ (Icc a b)) (hŒ≥‚ÇÇ : MapsTo Œ≥ (Icc a b) U)
    {f g : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : DifferentiableOn ‚ÑÇ f U) (hg : DifferentiableOn ‚ÑÇ g U)
    (hfg : ‚àÄ z ‚àà U, deriv f z = deriv g z) :
    f (Œ≥ b) - f (Œ≥ a) = g (Œ≥ b) - g (Œ≥ a) := by
  rw [sub_eq_sub_iff_sub_eq_sub]
  change (f - g) (Œ≥ b) = (f - g) (Œ≥ a)
  refine apply_eq_of_path hab ?_ hŒ≥‚ÇÅ hŒ≥‚ÇÇ
  refine isLocallyConstant_of_deriv_eq_zero hU (hf.sub hg) (Œª z hz => ?_)
  have h1 : DifferentiableAt ‚ÑÇ f z := hf.differentiableAt (hU.mem_nhds hz)
  have h2 : DifferentiableAt ‚ÑÇ g z := hg.differentiableAt (hU.mem_nhds hz)
  have h3 : deriv (f - g) z = deriv f z - deriv g z := deriv_sub h1 h2
  simp [hfg z hz, h3]

lemma sumSubAlong_eq_of_sigma (hab : a < b) {hf : LocalPrimitiveOn U f}
    {RW‚ÇÅ RW‚ÇÇ : RelAdaptedSubdivision a b hf.S Œ≥} (h : RW‚ÇÅ.œÉ = RW‚ÇÇ.œÉ)
    (hŒ≥ : ContinuousOn Œ≥ (Icc a b)) :
    RW‚ÇÅ.œÉ.sumSubAlong (hf.F ‚àò RW‚ÇÅ.I) Œ≥ = RW‚ÇÇ.œÉ.sumSubAlong (hf.F ‚àò RW‚ÇÇ.I) Œ≥ := by
  rcases hf with ‚ü®F, S, _, Sopn, Sder‚ü©
  rcases RW‚ÇÅ with ‚ü®œÉ, I‚ÇÅ, hI‚ÇÅ‚ü©
  rcases RW‚ÇÇ with ‚ü®œÉ', I‚ÇÇ, hI‚ÇÇ‚ü©
  subst h
  refine Subdivision.sum_congr (Œª k => ?_)
  apply sub_eq_sub_of_deriv_eq_deriv (œÉ.mono' hab).le ((Sopn _).inter (Sopn _))
  ¬∑ exact (hŒ≥.mono (œÉ.piece_subset hab.le))
  ¬∑ simpa only [mapsTo'] using subset_inter (hI‚ÇÅ k) (hI‚ÇÇ k)
  ¬∑ exact Œª z hz => (Sder (I‚ÇÅ k) z hz.1).differentiableAt.differentiableWithinAt
  ¬∑ exact Œª z hz => (Sder (I‚ÇÇ k) z hz.2).differentiableAt.differentiableWithinAt
  ¬∑ intro z hz
    have l1 := (Sder (I‚ÇÅ k) z hz.1).deriv
    have l2 := (Sder (I‚ÇÇ k) z hz.2).deriv
    simp only at l1 l2
    simp only [Function.comp_apply, l1, l2]

lemma telescopic (f : Fin (n + 1) ‚Üí ‚ÑÇ) :
    ‚àë i : Fin n, (f i.succ - f i.castSucc) = f (Fin.last n) - f 0 := by
  have l1 : ‚àë i : Fin n, f (i.succ) = ‚àë i : Fin (n + 1), f i - f 0 := by
    simp [Fin.sum_univ_succ f]
  have l2 : ‚àë i : Fin n, f (i.castSucc) = ‚àë i : Fin (n + 1), f i - f (Fin.last n) := by
    simp [Fin.sum_univ_castSucc f]
  simp [l1, l2]

lemma sumSubAlong_eq_sub
    (hab : a < b)
    (hF : DifferentiableOn ‚ÑÇ F U)
    (hf : LocalPrimitiveOn (Œ≥ '' Icc a b) (deriv F))
    (hŒ≥ : ContinuousOn Œ≥ (Icc a b))
    (RW : RelAdaptedSubdivision a b hf.S Œ≥)
    (hU : IsOpen U)
    (hh : MapsTo Œ≥ (Icc a b) U) :
    RW.œÉ.sumSubAlong (hf.F ‚àò RW.I) Œ≥ = F (Œ≥ b) - F (Œ≥ a) := by
  have key (i) : ((hf.F ‚àò RW.I) i ‚àò Œ≥) (RW.œÉ.y i) - ((hf.F ‚àò RW.I) i ‚àò Œ≥) (RW.œÉ.x i) =
      F (Œ≥ (RW.œÉ.y i)) - F (Œ≥ (RW.œÉ.x i)) := by
    apply sub_eq_sub_of_deriv_eq_deriv
    ¬∑ exact (RW.œÉ.mono' hab).le
    ¬∑ exact (hf.opn (RW.I i)).inter hU
    ¬∑ exact hŒ≥.mono (RW.œÉ.piece_subset hab.le)
    ¬∑ exact (Set.mapsTo'.2 (RW.sub i)).inter (hh.mono_left (RW.œÉ.piece_subset hab.le))
    ¬∑ exact Œª z hz => by exact (hf.der (RW.I i) z hz.1).differentiableAt.differentiableWithinAt
    ¬∑ exact DifferentiableOn.mono hF (inter_subset_right _ _)
    ¬∑ exact Œª z hz => (hf.der (RW.I i) z hz.1).deriv
  simp only [sumSubAlong, sumSub, sum, key]
  convert telescopic (F ‚àò Œ≥ ‚àò RW.œÉ)
  simp only [‚Üê RW.œÉ.last] ; rfl

lemma pintegral_deriv {F : ‚ÑÇ ‚Üí ‚ÑÇ} {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} (hab : a < b) (hU : IsOpen U)
    (hŒ≥ : ContinuousOn Œ≥ (Icc a b)) (h2 : MapsTo Œ≥ (Icc a b) U) (hF : DifferentiableOn ‚ÑÇ F U) :
    pintegral a b (deriv F) Œ≥ = F (Œ≥ b) - F (Œ≥ a) := by
  simpa [pintegral, hab, hŒ≥, (HasLocalPrimitiveOn.deriv hU hF).mono (mapsTo'.1 h2)]
  using sumSubAlong_eq_sub hab hF _ hŒ≥ _ hU h2

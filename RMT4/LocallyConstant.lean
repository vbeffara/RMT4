import Mathlib.Tactic
import Mathlib.Analysis.Calculus.Deriv.Basic
import Mathlib.Analysis.Calculus.MeanValue
import Mathlib.Topology.LocallyConstant.Basic

open Topology Filter Metric

variable {ùïú : Type*} [IsROrC ùïú] {f f‚ÇÅ f‚ÇÇ F1 F2 : ùïú ‚Üí ùïú} {z z‚ÇÄ : ùïú} {s : Set ùïú} {U : Set ùïú}

lemma isConst_nhds_of_hasDerivAt (h : ‚àÄ·∂† w in ùìù z, HasDerivAt f 0 w) : ‚àÄ·∂† w in ùìù z, f w = f z := by
  obtain ‚ü®r, hr, hf‚ü© := eventually_nhds_iff_ball.1 h
  refine eventually_nhds_iff_ball.2 ‚ü®r, hr, Œª w hw => ?_‚ü©
  have l1 : DifferentiableOn ùïú f (ball z r) :=
    Œª w hw => (hf w hw).differentiableAt.differentiableWithinAt
  have l2 (w) (hw : w ‚àà ball z r) : fderivWithin ùïú f (ball z r) w = 0 := by
    have l3 : UniqueDiffWithinAt ùïú (ball z r) w := isOpen_ball.uniqueDiffWithinAt hw
    have l4 := (hf w hw).hasFDerivAt.hasFDerivWithinAt.fderivWithin l3
    rw [l4] ; ext1 ; simp
  exact (convex_ball z r).is_const_of_fderivWithin_eq_zero l1 l2 hw (mem_ball_self hr)

lemma eventuallyEq_of_hasDeriv' (h1 : ‚àÄ·∂† w in ùìù z, HasDerivAt F1 (f w) w)
    (h2 : ‚àÄ·∂† w in ùìù z, HasDerivAt F2 (f w) w) : ‚àÄ·∂† w in ùìù z, F2 w - F2 z = F1 w - F1 z := by
  have : ‚àÄ·∂† w in ùìù z, HasDerivAt (F2 - F1) 0 w := by
    filter_upwards [h1, h2] with w h1 h2 ; simpa using h2.sub h1
  filter_upwards [isConst_nhds_of_hasDerivAt this] with w h
  simpa [sub_eq_sub_iff_sub_eq_sub] using h

lemma eventuallyEq_of_hasDeriv (h1 : ‚àÄ·∂† w in ùìù z, HasDerivAt F1 (f w) w)
    (h2 : ‚àÄ·∂† w in ùìù z, HasDerivAt F2 (f w) w) (h3 : F1 z = F2 z) : ‚àÄ·∂† w in ùìù z, F2 w = F1 w := by
  filter_upwards [eventuallyEq_of_hasDeriv' h1 h2] with a ha
  simpa [h3, sub_left_inj] using ha

lemma isLocallyConstant_of_deriv_eq_zero (hU : IsOpen U) (h : DifferentiableOn ùïú f U)
    (hf : U.EqOn (deriv f) 0) :
    IsLocallyConstant (U.restrict f) := by
  refine (IsLocallyConstant.iff_exists_open _).2 (Œª ‚ü®z, hz‚ü© => ?_)
  obtain ‚ü®Œµ, L1, L2‚ü© := isOpen_iff.1 hU z hz
  refine ‚ü®ball ‚ü®z, hz‚ü© Œµ, isOpen_ball, mem_ball_self L1, Œª ‚ü®z', _‚ü© hz' => ?_‚ü©
  refine (convex_ball z Œµ).is_const_of_fderivWithin_eq_zero (h.mono L2) ?_ hz' (mem_ball_self L1)
  intro x hx
  rw [fderivWithin_eq_fderiv (isOpen_ball.uniqueDiffWithinAt hx)]
  ¬∑ exact ContinuousLinearMap.ext_ring (hf (L2 hx))
  ¬∑ exact h.differentiableAt (hU.mem_nhds (L2 hx))

lemma isLocallyConstant_of_hasDeriv (hs : IsOpen s) (hf : ‚àÄ x ‚àà s, HasDerivAt f 0 x) :
    IsLocallyConstant (s.restrict f) := by
  apply isLocallyConstant_of_deriv_eq_zero hs
  ¬∑ exact Œª x hx => (hf x hx).differentiableAt.differentiableWithinAt
  ¬∑ exact Œª x hx => (hf x hx).deriv

lemma IsPreconnected.apply_eq_of_hasDeriv_zero (hs : IsOpen s) (hs' : IsPreconnected s)
    (hf : ‚àÄ x ‚àà s, HasDerivAt f 0 x) : ‚àÄ x ‚àà s, ‚àÄ y ‚àà s, f x = f y := by
  have l0 : PreconnectedSpace s := isPreconnected_iff_preconnectedSpace.1 hs'
  have l1 := isLocallyConstant_of_hasDeriv hs hf
  have l2 : IsPreconnected (Set.univ : Set s) := preconnectedSpace_iff_univ.mp l0
  intro x hx y hy
  simpa using
    l1.apply_eq_of_isPreconnected l2 (x := ‚ü®x, hx‚ü©) (y := ‚ü®y, hy‚ü©) (Set.mem_univ _) (Set.mem_univ _)

lemma IsPreconnected.apply_eq_of_hasDeriv_eq (hs' : IsPreconnected s) (hs : IsOpen s) (hz‚ÇÄ : z‚ÇÄ ‚àà s)
    (hf‚ÇÅ : ‚àÄ x ‚àà s, HasDerivAt f‚ÇÅ (f x) x) (hf‚ÇÇ : ‚àÄ x ‚àà s, HasDerivAt f‚ÇÇ (f x) x)
    (h : f‚ÇÅ z‚ÇÄ = f‚ÇÇ z‚ÇÄ) : Set.EqOn f‚ÇÅ f‚ÇÇ s := by
  have l1 (x) (hx : x ‚àà s) : HasDerivAt (f‚ÇÅ - f‚ÇÇ) 0 x := by simpa using (hf‚ÇÅ x hx).sub (hf‚ÇÇ x hx)
  intro x hx
  simpa [h, sub_eq_zero] using hs'.apply_eq_of_hasDeriv_zero hs l1 x hx z‚ÇÄ hz‚ÇÄ

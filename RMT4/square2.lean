import Mathlib
import RMT4.Primitive

set_option autoImplicit false

variable {f f' F : ‚ÑÇ ‚Üí ‚ÑÇ} {w z z‚ÇÅ z‚ÇÇ z‚ÇÉ z‚ÇÑ w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ p : ‚ÑÇ} {W : Fin 4 -> ‚ÑÇ}
  {t x x‚ÇÅ x‚ÇÇ y y‚ÇÅ y‚ÇÇ : ‚Ñù} {U : Set ‚ÑÇ} {Œ≥‚ÇÅ Œ≥‚ÇÇ : ‚Ñù ‚Üí ‚ÑÇ}

open Complex Set Metric Topology Interval

local notation "ùïÄ" => Icc (0 : ‚Ñù) 1

noncomputable def SegmentIntegral (f : ‚ÑÇ ‚Üí ‚ÑÇ) (z w : ‚ÑÇ) : ‚ÑÇ :=
    (w - z) ‚Ä¢ ‚à´ t in (0:‚Ñù)..1, f (z + t ‚Ä¢ (w - z))

theorem SegmentIntegral.symm : SegmentIntegral f w z = - SegmentIntegral f z w := by
  simp [SegmentIntegral]
  have := @intervalIntegral.integral_comp_sub_left ‚ÑÇ _ _ 0 1 (Œª t => f (w + (1 - t) * (z - w))) 1
  simp at this ; rw [this]
  ring_nf ; congr <;> ext <;> ring_nf

theorem shim : SegmentIntegral = primitive := by
  ext f z w
  simp [SegmentIntegral, primitive]
  left
  apply intervalIntegral.integral_congr
  intro t _
  simp ; ring_nf

theorem convex_neighborhood (hU : IsOpen U) (hzw : segment ‚Ñù z w ‚äÜ U) :
    ‚àÉ V : Set ‚ÑÇ, IsOpen V ‚àß segment ‚Ñù z w ‚äÜ V ‚àß V ‚äÜ U ‚àß Convex ‚Ñù V := by
  obtain ‚ü®Œ¥, hŒ¥, hŒ¥U‚ü© := isCompact_segment.exists_thickening_subset_open hU hzw
  exact ‚ü®_, isOpen_thickening, self_subset_thickening hŒ¥ _, hŒ¥U, (convex_segment z w).thickening _‚ü©

theorem nocheat (hU : IsOpen U) (hf : DifferentiableOn ‚ÑÇ f U) (hzw : segment ‚Ñù z w ‚äÜ U) :
    HasDerivAt (SegmentIntegral f z) (f w) w := by
  rw [shim]
  obtain ‚ü®V, hV1, hV2, hV3, hV4‚ü© := convex_neighborhood hU hzw
  have h1 : DifferentiableOn ‚ÑÇ f V := hf.mono hV3
  have h2 : w ‚àà V := hV2 (right_mem_segment ‚Ñù z w)
  have h3 : StarConvex ‚Ñù z V := hV4.starConvex <| hV2 (left_mem_segment ‚Ñù z w)
  apply DifferentiableOn.exists_primitive h1 h3 hV1 h2

theorem nocheat' (hU : IsOpen U) (hf : DifferentiableOn ‚ÑÇ f U) (hzw : segment ‚Ñù z w ‚äÜ U) :
    HasDerivAt (Œª z => SegmentIntegral f z w) (- f z) z := by
  have : (Œª z => SegmentIntegral f z w) = (Œª z => - SegmentIntegral f w z) := by
    ext ; exact SegmentIntegral.symm
  rw [this]
  exact (nocheat hU hf (segment_symm ‚Ñù w z ‚ñ∏ hzw)).neg

theorem SegmentIntegral_deriv (hU : IsOpen U) (hf : DifferentiableOn ‚ÑÇ f U)
    (hzw : segment ‚Ñù z w ‚äÜ U) : SegmentIntegral (deriv f) z w = f w - f z := by
  have l0 : MapsTo (fun t => z + t ‚Ä¢ (w - z)) (Icc (0 : ‚Ñù) 1) U := by
    intro t ht ; apply hzw ; convert mem_segment ht using 1 ; simp ; ring
  have l1 : ContinuousOn (fun t => deriv f (z + t ‚Ä¢ (w - z))) (Icc 0 1 : Set ‚Ñù) := by
    refine (hf.deriv hU).continuousOn.comp ?_ l0
    apply Continuous.continuousOn
    continuity
  have l2 : ‚àÄ t ‚àà (Icc 0 1 : Set ‚Ñù), HasDerivAt f (deriv f (z + t ‚Ä¢ (w - z))) (z + t ‚Ä¢ (w - z)) := by
    intro t ht
    refine hasDerivAt_deriv_iff.mpr ?_
    refine hf.differentiableAt ?_
    apply hU.mem_nhds
    exact l0 ht
  simpa using intervalIntegral.integral_unitInterval_deriv_eq_sub l1 l2

lemma mapsto_segment (h : segment ‚Ñù z w ‚äÜ U) : MapsTo (fun t => z + t ‚Ä¢ (w - z)) ùïÄ U := by
  intro t ht ; apply h ; convert mem_segment ht using 1 ; simp ; ring

theorem SegmentIntegral_deriv' (hf : ContinuousOn f U) (hzw : segment ‚Ñù z w ‚äÜ U)
    (h'2 : ‚àÄ z ‚àà U, HasDerivAt F (f z) z) : SegmentIntegral f z w = F w - F z := by
  have l1 : ContinuousOn (fun t => f (z + t ‚Ä¢ (w - z))) ùïÄ := by
    refine hf.comp ?_ <| mapsto_segment hzw
    apply Continuous.continuousOn ; continuity
  have l2 (t : ‚Ñù) (ht : t ‚àà ùïÄ) : HasDerivAt F (f (z + t ‚Ä¢ (w - z))) (z + t ‚Ä¢ (w - z)) :=
    h'2 _ <| mapsto_segment hzw ht
  simpa using intervalIntegral.integral_unitInterval_deriv_eq_sub l1 l2

theorem LineIntegral_diff (hU : IsOpen U) (hf : DifferentiableOn ‚ÑÇ f U) (hŒ≥‚ÇÅ : Differentiable ‚Ñù Œ≥‚ÇÅ)
    (hŒ≥‚ÇÇ : Differentiable ‚Ñù Œ≥‚ÇÇ) (h : segment ‚Ñù (Œ≥‚ÇÅ t) (Œ≥‚ÇÇ t) ‚äÜ U) :
    HasDerivAt (Œª t => SegmentIntegral f (Œ≥‚ÇÅ t) (Œ≥‚ÇÇ t))
    (f (Œ≥‚ÇÇ t) * deriv Œ≥‚ÇÇ t - f (Œ≥‚ÇÅ t) * deriv Œ≥‚ÇÅ t) t := by
  obtain ‚ü®V, hV1, hV2, hV3, hV4‚ü© := convex_neighborhood hU h
  have e5 : Œ≥‚ÇÅ t ‚àà V := hV2 <| left_mem_segment ‚Ñù (Œ≥‚ÇÅ t) (Œ≥‚ÇÇ t)
  have e4 : Œ≥‚ÇÇ t ‚àà V := hV2 <| right_mem_segment ‚Ñù (Œ≥‚ÇÅ t) (Œ≥‚ÇÇ t)
  have (z : ‚ÑÇ) (hz : z ‚àà V) : HasDerivAt (primitive f (Œ≥‚ÇÅ t)) (f z) z :=
    (hf.mono hV3).exists_primitive (hV4.starConvex e5) hV1 hz
  have e1 : ‚àÄ·∂† s in ùìù t, Œ≥‚ÇÅ s ‚àà V := hŒ≥‚ÇÅ.continuous.continuousAt <| hV1.mem_nhds e5
  have e2 : ‚àÄ·∂† s in ùìù t, Œ≥‚ÇÇ s ‚àà V := hŒ≥‚ÇÇ.continuous.continuousAt <| hV1.mem_nhds e4
  have e3 : DifferentiableOn ‚ÑÇ (primitive f (Œ≥‚ÇÅ t)) V := by
    intro z hz ; exact (this z hz).differentiableAt.differentiableWithinAt
  have l1 : ‚àÄ·∂† s in ùìù t, SegmentIntegral f (Œ≥‚ÇÅ s) (Œ≥‚ÇÇ s) =
      primitive f (Œ≥‚ÇÅ t) (Œ≥‚ÇÇ s) - primitive f (Œ≥‚ÇÅ t) (Œ≥‚ÇÅ s) := by
    filter_upwards [e1, e2] with s hs1 hs2
    have e4 : segment ‚Ñù (Œ≥‚ÇÅ s) (Œ≥‚ÇÇ s) ‚äÜ V := hV4.segment_subset hs1 hs2
    rw [‚Üê SegmentIntegral_deriv hV1 e3 e4]
    simp [SegmentIntegral] ; left
    apply intervalIntegral.integral_congr
    intro t ht
    simp
    have e5 := hV4.add_smul_mem (y := Œ≥‚ÇÇ s - Œ≥‚ÇÅ s) hs1 (by simpa using hs2) (by simpa using ht)
    exact (this (Œ≥‚ÇÅ s + t * (Œ≥‚ÇÇ s - Œ≥‚ÇÅ s)) (by simpa using e5)).deriv.symm
  refine HasDerivAt.congr_of_eventuallyEq (HasDerivAt.sub ?_ ?_) l1
  ¬∑ exact this (Œ≥‚ÇÇ t) e4 |>.comp _ (hŒ≥‚ÇÇ t).hasDerivAt
  ¬∑ exact this (Œ≥‚ÇÅ t) e5 |>.comp _ (hŒ≥‚ÇÅ t).hasDerivAt

noncomputable def RectangleIntegral (f : ‚ÑÇ ‚Üí ‚ÑÇ) (z w : ‚ÑÇ) : ‚ÑÇ :=
    ((‚à´ x : ‚Ñù in z.re..w.re, f (x + z.im * I)) - (‚à´ x : ‚Ñù in z.re..w.re, f (x + w.im * I))
     + I ‚Ä¢ (‚à´ y : ‚Ñù in z.im..w.im, f (w.re + y * I)) - I ‚Ä¢ ‚à´ y : ‚Ñù in z.im..w.im, f (z.re + y * I))

noncomputable def QuadIntegral (f : ‚ÑÇ ‚Üí ‚ÑÇ) (w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ : ‚ÑÇ) : ‚ÑÇ := SegmentIntegral f w‚ÇÅ w‚ÇÇ +
    SegmentIntegral f w‚ÇÇ w‚ÇÉ + SegmentIntegral f w‚ÇÉ w‚ÇÑ + SegmentIntegral f w‚ÇÑ w‚ÇÅ

noncomputable def QuadIntegral' (f : ‚ÑÇ ‚Üí ‚ÑÇ) (w : Fin 4 -> ‚ÑÇ) : ‚ÑÇ :=
    QuadIntegral f (w 0) (w 1) (w 2) (w 3)

def QuadSupport (w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ : ‚ÑÇ) : Set ‚ÑÇ := segment ‚Ñù w‚ÇÅ w‚ÇÇ ‚à™ segment ‚Ñù w‚ÇÇ w‚ÇÉ ‚à™ segment ‚Ñù w‚ÇÉ w‚ÇÑ ‚à™
    segment ‚Ñù w‚ÇÑ w‚ÇÅ

def QuadSupport' (w : Fin 4 -> ‚ÑÇ) : Set ‚ÑÇ := QuadSupport (w 0) (w 1) (w 2) (w 3)

theorem QuadIntegral_rotate : QuadIntegral f w‚ÇÇ w‚ÇÉ w‚ÇÑ w‚ÇÅ = QuadIntegral f w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ := by
  simp [QuadIntegral] ; abel

theorem SideIntegral_eq_LineIntegral {f : ‚ÑÇ ‚Üí ‚ÑÇ} :
    ‚à´ x : ‚Ñù in x‚ÇÅ..x‚ÇÇ, f (x + y * I) = SegmentIntegral f (x‚ÇÅ + y * I) (x‚ÇÇ + y * I) := by
  have := @intervalIntegral.smul_integral_comp_mul_add ‚ÑÇ _ _ _ 0 1 (fun z => f (z + y * I)) (x‚ÇÇ - x‚ÇÅ) x‚ÇÅ
  simp at this
  rw [‚Üê this]
  simp [SegmentIntegral]
  left
  congr ; ext ; ring_nf

theorem SideIntegral_eq_LineIntegral' {f : ‚ÑÇ ‚Üí ‚ÑÇ} :
    I ‚Ä¢ ‚à´ y : ‚Ñù in y‚ÇÅ..y‚ÇÇ, f (x + y * I) = SegmentIntegral f (x + y‚ÇÅ * I) (x + y‚ÇÇ * I) := by
  have := @intervalIntegral.smul_integral_comp_mul_add ‚ÑÇ _ _ _ 0 1 (fun z => f (x + z * I)) (y‚ÇÇ - y‚ÇÅ) y‚ÇÅ
  simp at this
  rw [‚Üê this]
  simp [SegmentIntegral]
  simp_rw [‚Üê mul_assoc, mul_sub, mul_comm]
  congr ; ext ; ring_nf

def zw (z w : ‚ÑÇ) : ‚ÑÇ := w.re + z.im * I

theorem rect_eq_quad : RectangleIntegral f z w = QuadIntegral f z (zw z w) w (zw w z) := by
  simp_rw [RectangleIntegral, QuadIntegral, sub_eq_add_neg, ‚Üê smul_neg]
  simp_rw [‚Üê intervalIntegral.integral_symm]
  simp_rw [SideIntegral_eq_LineIntegral, SideIntegral_eq_LineIntegral']
  simp [zw] ; ring

theorem loc_constant_1 (hU : IsOpen U) (hf : DifferentiableOn ‚ÑÇ f U)
    (h : QuadSupport z‚ÇÅ z‚ÇÇ z‚ÇÉ z‚ÇÑ ‚äÜ U) : HasDerivAt (Œª z => QuadIntegral f z z‚ÇÇ z‚ÇÉ z‚ÇÑ) 0 z‚ÇÅ := by
  simp only [QuadSupport, union_subset_iff] at h
  simpa using (nocheat' hU hf (by tauto)) |>.add (hasDerivAt_const _ _)
    |>.add (hasDerivAt_const _ _) |>.add (nocheat hU hf (by tauto))

theorem loc_constant_2 (hU : IsOpen U) (hf : DifferentiableOn ‚ÑÇ f U)
    (h : QuadSupport z‚ÇÅ z‚ÇÇ z‚ÇÉ z‚ÇÑ ‚äÜ U) : HasDerivAt (Œª z => QuadIntegral f z‚ÇÅ z z‚ÇÉ z‚ÇÑ) 0 z‚ÇÇ := by
  simp only [QuadSupport, union_subset_iff] at h
  simpa using (nocheat hU hf (by tauto)) |>.add (nocheat' hU hf (by tauto))
    |>.add (hasDerivAt_const _ _) |>.add (hasDerivAt_const _ _)

theorem loc_constant_3 (hU : IsOpen U) (hf : DifferentiableOn ‚ÑÇ f U)
    (h : QuadSupport z‚ÇÅ z‚ÇÇ z‚ÇÉ z‚ÇÑ ‚äÜ U) : HasDerivAt (Œª z => QuadIntegral f z‚ÇÅ z‚ÇÇ z z‚ÇÑ) 0 z‚ÇÉ := by
  simp only [QuadSupport, union_subset_iff] at h
  simpa using (hasDerivAt_const _ _) |>.add (nocheat hU hf (by tauto))
    |>.add (nocheat' hU hf (by tauto)) |>.add (hasDerivAt_const _ _)

theorem loc_constant_4 (hU : IsOpen U) (hf : DifferentiableOn ‚ÑÇ f U)
    (h : QuadSupport z‚ÇÅ z‚ÇÇ z‚ÇÉ z‚ÇÑ ‚äÜ U) : HasDerivAt (Œª z => QuadIntegral f z‚ÇÅ z‚ÇÇ z‚ÇÉ z) 0 z‚ÇÑ := by
  simp only [QuadSupport, union_subset_iff] at h
  simpa using hasDerivAt_const _ _ |>.add (nocheat hU hf (by tauto))
    |>.add (nocheat' hU hf (by tauto))

example {hf : Differentiable ‚ÑÇ f} {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} {hŒ≥ : Differentiable ‚Ñù Œ≥} {t : ‚Ñù} :
    HasDerivAt (f ‚àò Œ≥) (deriv f (Œ≥ t) * deriv Œ≥ t) t := by
  refine @HasDerivAt.comp ‚Ñù _ t ‚ÑÇ _ _ Œ≥ f (deriv Œ≥ t) (deriv f (Œ≥ t)) ?_ ?_
  exact hasDerivAt_deriv_iff.mpr (hf (Œ≥ t))
  exact hasDerivAt_deriv_iff.mpr (hŒ≥ t)

abbrev HolomorphicOn {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚ÑÇ E] (f : ‚ÑÇ ‚Üí E) (s : Set ‚ÑÇ) :
    Prop := DifferentiableOn ‚ÑÇ f s

def Rectangle (z w : ‚ÑÇ) : Set ‚ÑÇ := [[z.re, w.re]] √ó‚ÑÇ [[z.im, w.im]]

theorem QuadIntegral_cancel (hf : ContinuousOn f U) (hQ : QuadSupport w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ ‚äÜ U)
    (h' : ‚àÉ F : ‚ÑÇ ‚Üí ‚ÑÇ, ‚àÄ z ‚àà U, HasDerivAt F (f z) z) : QuadIntegral f w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ = 0 := by
  simp [QuadSupport] at hQ ; obtain ‚ü®‚ü®‚ü®l2, l3‚ü©, l4‚ü©, l5‚ü© := hQ
  obtain ‚ü®F, hF2‚ü© := h'
  simp [QuadIntegral, SegmentIntegral_deriv' hf l2 hF2, SegmentIntegral_deriv' hf l3 hF2,
    SegmentIntegral_deriv' hf l4 hF2, SegmentIntegral_deriv' hf l5 hF2]

-- example {a b c d : ‚Ñù} (h1 : a = b) (h2 : c = d) : a + c = b + d := by
--   exact Mathlib.Tactic.LinearCombination.add_pf h1 h2

lemma mine (h1 : z.re < 0) (h2 : 0 < w.re) (h3 : z.im < 0) (h4 : 0 < w.im) (hU : IsOpen U)
    (hf : HolomorphicOn f (U \ {0})) (h : Rectangle z w ‚äÜ U) : ‚àÄ·∂† c : ‚Ñù in ùìù[>] 0,
    RectangleIntegral f z w = RectangleIntegral f (- c - c * I) (c + c * I) := by
  have h1 : ‚àÄ·∂† c : ‚Ñù in ùìù[>] 0, z.re < - c := sorry
  have h2 : ‚àÄ·∂† c : ‚Ñù in ùìù[>] 0, c < w.re := sorry
  have h3 : ‚àÄ·∂† c : ‚Ñù in ùìù[>] 0, z.im < - c := sorry
  have h4 : ‚àÄ·∂† c : ‚Ñù in ùìù[>] 0, c < w.im := sorry
  filter_upwards [h1, h2, h3, h4] with c c1 c2 c3 c4
  let w‚ÇÅ := - c - c * I
  let w‚ÇÇ := c - c * I
  let w‚ÇÉ := c + c * I
  let w‚ÇÑ := - c + c * I

  rw [rect_eq_quad, rect_eq_quad, ‚Üê sub_eq_zero]

  have la1 : ContinuousOn f (Rectangle z (zw w‚ÇÅ w)) := sorry
  have la2 : QuadSupport z (zw z w) w‚ÇÇ w‚ÇÅ ‚äÜ Rectangle z (zw w‚ÇÅ w) := sorry
  have la3 : (‚àÉ F, ‚àÄ z_1 ‚àà Rectangle z (zw w‚ÇÅ w), HasDerivAt F (f z_1) z_1) := sorry
  have la := QuadIntegral_cancel la1 la2 la3 ; clear la1 la2 la3

  have lb1 : ContinuousOn f (Rectangle (zw z w‚ÇÇ) w) := sorry
  have lb2 : QuadSupport (zw z w) w w‚ÇÉ w‚ÇÇ ‚äÜ Rectangle (zw z w‚ÇÇ) w := sorry
  have lb3 : (‚àÉ F, ‚àÄ z_1 ‚àà Rectangle (zw z w‚ÇÇ) w, HasDerivAt F (f z_1) z_1) := sorry
  have lb := QuadIntegral_cancel lb1 lb2 lb3 ; clear lb1 lb2 lb3

  have lc1 : ContinuousOn f (Rectangle (zw w‚ÇÑ z) w) := sorry
  have lc2 : QuadSupport w (zw w z) w‚ÇÑ w‚ÇÉ ‚äÜ Rectangle (zw w‚ÇÑ z) w := sorry
  have lc3 : (‚àÉ F, ‚àÄ z_1 ‚àà Rectangle (zw w‚ÇÑ z) w, HasDerivAt F (f z_1) z_1) := sorry
  have lc := QuadIntegral_cancel lc1 lc2 lc3 ; clear lc1 lc2 lc3

  have ld1 : ContinuousOn f (Rectangle z (zw w w‚ÇÑ)) := sorry
  have ld2 : QuadSupport (zw w z) z w‚ÇÅ w‚ÇÑ ‚äÜ Rectangle z (zw w w‚ÇÑ) := sorry
  have ld3 : (‚àÉ F, ‚àÄ z_1 ‚àà Rectangle z (zw w w‚ÇÑ), HasDerivAt F (f z_1) z_1) := sorry
  have ld := QuadIntegral_cancel ld1 ld2 ld3 ; clear ld1 ld2 ld3

  have le := Mathlib.Tactic.LinearCombination.add_pf la lb
  have lf := Mathlib.Tactic.LinearCombination.add_pf lc ld
  have lg := Mathlib.Tactic.LinearCombination.add_pf le lf
  simp [QuadIntegral] at lg ‚ä¢
  convert lg using 1 ; clear lg
  rw [‚Üê sub_eq_zero]
  ring_nf
  simp only [SegmentIntegral.symm (z := zw z w)] ; ring_nf
  simp only [SegmentIntegral.symm (z := zw w z)] ; ring_nf
  simp only [SegmentIntegral.symm (z := z)] ; ring_nf
  simp only [SegmentIntegral.symm (z := w)] ; ring_nf
  simp [zw] ; ring_nf
  simp only [SegmentIntegral.symm (z := ‚Üëc + ‚Üëc * I)] ; ring_nf
  simp only [SegmentIntegral.symm (z := -‚Üëc - ‚Üëc * I)] ; ring_nf

lemma RectanglePullToNhdOfPole {f : ‚ÑÇ ‚Üí ‚ÑÇ} {z w p : ‚ÑÇ} (zRe_lt_wRe : z.re < w.re)
    (zIm_lt_wIm : z.im < w.im) (pInRectInterior : Rectangle z w ‚àà nhds p)
    (fHolo : HolomorphicOn f (Rectangle z w \ {p})) :
    ‚àÄ·∂† (c : ‚Ñù) in ùìù[>]0, RectangleIntegral f z w =
      RectangleIntegral f (-c - I * c + p) (c + I * c + p) := by
  sorry

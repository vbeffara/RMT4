import Mathlib
import RMT4.Primitive

set_option autoImplicit false

local notation "ùïÄ" => unitInterval

variable {f : ‚ÑÇ ‚Üí ‚ÑÇ} {w z z‚ÇÅ z‚ÇÇ z‚ÇÉ z‚ÇÑ w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ : ‚ÑÇ} {x x‚ÇÅ x‚ÇÇ y y‚ÇÅ y‚ÇÇ : ‚Ñù}

open Complex Set

noncomputable def SegmentIntegral (f : ‚ÑÇ ‚Üí ‚ÑÇ) (z w : ‚ÑÇ) : ‚ÑÇ :=
    (w - z) ‚Ä¢ ‚à´ t in (0:‚Ñù)..1, f (z + t ‚Ä¢ (w - z))

theorem SegmentIntegral.symm : SegmentIntegral f w z = - SegmentIntegral f z w := by
  simp [SegmentIntegral]
  have := @intervalIntegral.integral_comp_sub_left ‚ÑÇ _ _ 0 1 (Œª t => f (w + (1 - t) * (z - w))) 1
  simp at this ; rw [this]
  ring_nf ; congr <;> ext <;> ring_nf

theorem shim : SegmentIntegral = primitive := by
  ext f z w
  simp [SegmentIntegral, primitive]
  left
  apply intervalIntegral.integral_congr
  intro t _
  simp ; ring_nf

theorem cheat (hf : Differentiable ‚ÑÇ f) : HasDerivAt (SegmentIntegral f z) (f w) w := by
  have h1 : StarConvex ‚Ñù z (univ : Set ‚ÑÇ) := starConvex_univ z
  rw [shim]
  exact @DifferentiableOn.exists_primitive f z w univ hf.differentiableOn h1 isOpen_univ (mem_univ _)

theorem cheat' (hf : Differentiable ‚ÑÇ f) : HasDerivAt (Œª z => SegmentIntegral f z w) (- f z) z := by
  have : (Œª z => SegmentIntegral f z w) = (Œª z => - SegmentIntegral f w z) := by
    ext ; exact SegmentIntegral.symm
  rw [this]
  exact (cheat hf).neg

noncomputable def RectangleIntegral (f : ‚ÑÇ ‚Üí ‚ÑÇ) (z w : ‚ÑÇ) : ‚ÑÇ :=
    ((‚à´ x : ‚Ñù in z.re..w.re, f (x + z.im * I)) - (‚à´ x : ‚Ñù in z.re..w.re, f (x + w.im * I))
     + I ‚Ä¢ (‚à´ y : ‚Ñù in z.im..w.im, f (w.re + y * I)) - I ‚Ä¢ ‚à´ y : ‚Ñù in z.im..w.im, f (z.re + y * I))

noncomputable def QuadIntegral (f : ‚ÑÇ ‚Üí ‚ÑÇ) (w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ : ‚ÑÇ) : ‚ÑÇ := SegmentIntegral f w‚ÇÅ w‚ÇÇ +
    SegmentIntegral f w‚ÇÇ w‚ÇÉ + SegmentIntegral f w‚ÇÉ w‚ÇÑ + SegmentIntegral f w‚ÇÑ w‚ÇÅ

theorem QuadIntegral_rotate : QuadIntegral f w‚ÇÇ w‚ÇÉ w‚ÇÑ w‚ÇÅ = QuadIntegral f w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ := by
  simp [QuadIntegral] ; abel

theorem SideIntegral_eq_LineIntegral {f : ‚ÑÇ ‚Üí ‚ÑÇ} :
    ‚à´ x : ‚Ñù in x‚ÇÅ..x‚ÇÇ, f (x + y * I) = SegmentIntegral f (x‚ÇÅ + y * I) (x‚ÇÇ + y * I) := by
  have := @intervalIntegral.smul_integral_comp_mul_add ‚ÑÇ _ _ _ 0 1 (fun z => f (z + y * I)) (x‚ÇÇ - x‚ÇÅ) x‚ÇÅ
  simp at this
  rw [‚Üê this]
  simp [SegmentIntegral]
  left
  congr ; ext ; ring_nf

theorem SideIntegral_eq_LineIntegral' {f : ‚ÑÇ ‚Üí ‚ÑÇ} :
    I ‚Ä¢ ‚à´ y : ‚Ñù in y‚ÇÅ..y‚ÇÇ, f (x + y * I) = SegmentIntegral f (x + y‚ÇÅ * I) (x + y‚ÇÇ * I) := by
  have := @intervalIntegral.smul_integral_comp_mul_add ‚ÑÇ _ _ _ 0 1 (fun z => f (x + z * I)) (y‚ÇÇ - y‚ÇÅ) y‚ÇÅ
  simp at this
  rw [‚Üê this]
  simp [SegmentIntegral]
  simp_rw [‚Üê mul_assoc, mul_sub, mul_comm]
  congr ; ext ; ring_nf

def zw (z w : ‚ÑÇ) : ‚ÑÇ := w.re + z.im * I

theorem rect_eq_quad : RectangleIntegral f z w = QuadIntegral f z (zw z w) w (zw w z) := by
  simp_rw [RectangleIntegral, QuadIntegral, sub_eq_add_neg, ‚Üê smul_neg]
  simp_rw [‚Üê intervalIntegral.integral_symm]
  simp_rw [SideIntegral_eq_LineIntegral, SideIntegral_eq_LineIntegral']
  simp [zw] ; ring

theorem loc_constant_4 {hf : Differentiable ‚ÑÇ f} : HasDerivAt (QuadIntegral f z‚ÇÅ z‚ÇÇ z‚ÇÉ) 0 z := by
  have : HasDerivAt (fun _ => SegmentIntegral f z‚ÇÅ z‚ÇÇ + SegmentIntegral f z‚ÇÇ z‚ÇÉ) 0 z :=
    hasDerivAt_const z _
  have : HasDerivAt (fun w‚ÇÑ => SegmentIntegral f z‚ÇÅ z‚ÇÇ + SegmentIntegral f z‚ÇÇ z‚ÇÉ +
      SegmentIntegral f z‚ÇÉ w‚ÇÑ) (f z) z := by
    simpa using @HasDerivAt.add _ _ _ _ _ _ (SegmentIntegral f z‚ÇÉ) 0 (f z) z this (cheat hf)
  simpa using HasDerivAt.add (f' := f z) (g' := -f z) (x := z) this (cheat' hf)
